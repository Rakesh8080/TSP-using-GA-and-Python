import math

import random

import numpy as np


x = [54, 54, 37, 41, 2, 7, 25, 22, 18, 4, 13, 18, 24, 25, 44, 41, 45, 58, 62, 82, 91, 83, 71, 64, 68, 83, 87, 74, 71, 58]

y = [67, 62, 84, 94, 99, 64, 62, 60, 54, 50, 40, 40, 42, 38, 35, 26, 21, 35, 32, 7, 38, 46, 44, 60, 58, 69, 76, 78, 71, 69]


# optimization parameters

pop_size = 500

mutation = 0.01

crossover_speed = 0.4

mutation_size = 1

crossover = 0.5



pattern = []


print(pattern)


population = []

pres = []

distanceList = []

fitness = []

def calc_dist(x1, y1, x2, y2):

d = math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))

return d



# Population creation

for i in range (0, pop_size, 1):

pattern = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]

random.shuffle(pattern)

population.append(pattern)



print(population)




for i in range (0, 1000, 1):


distanceList = []

newPopulation = []

fitness = []

copy = []


# Fitness checking

for i in range (0, pop_size, 1):

tot_distance = 0

pres = population[i]

#print(pres)

tot_distance = calc_dist(x[0], y[0], x[pres[0]], y[pres[0]])

#print(tot_distance)

for j in range (0, len(pres)-1, 1):

distance = calc_dist(x[pres[j]], y[pres[j]], x[pres[j+1]], y[pres[j+1]])

#print(distance)

tot_distance = tot_distance + distance

tot_distance += calc_dist(x[pres[j+1]], y[pres[j+1]], x[0], y[0])


#print(tot_distance)

distanceList.append(tot_distance)

#print(distanceList)



for i in range (0, len(distanceList), 1):

var = 1/distanceList[i]

fitness.append(var)


#normalise fitness

sum = 0

for i in range (0, len(fitness), 1):

sum += fitness[i]

for i in range (0, len(fitness), 1):

fitness[i] = fitness[i]/sum


print(fitness)


# New population creation


# Take top 50% chromosome from prev population


copy = fitness.copy()

print(copy)

copy.sort()


fittest = 0

leastDistance = 0

for k in range (0, len(fitness), 1):

if (copy[len(copy)-1] == fitness[k]):

if (leastDistance != distanceList[k]):

fittest = population[k]

leastDistance = distanceList[k]

print(fittest)

print(leastDistance)

break



for i in range (math.ceil(pop_size/2), pop_size, 1):

for k in range (0, len(fitness), 1):

if(copy[i] == fitness[k]):

if population[k] not in newPopulation:

print(population[k])

newPopulation.append(population[k])

break

print(newPopulation)


# Mutation 


noOfMutations = math.floor(mutation*pop_size)

mutateSample = random.sample(newPopulation, noOfMutations)

print(mutateSample)


for i in range (0, len(mutateSample), 1):

print("First mutation sample")

currentMutation = mutateSample[i].copy()

a=0

b=0

while(currentMutation[a]==currentMutation[b]):

a = random.randint(0, len(currentMutation)-mutation_size)

b = random.randint(0, len(currentMutation)-mutation_size)

print(a)

print(b)

for j in range (0, mutation_size, 1):

print("swapping...")

#swap 2 array elements

pres = currentMutation[a+j]

currentMutation[a+j] = currentMutation[b+j]

currentMutation[b+j] = pres

newPopulation.append(currentMutation)



print(newPopulation)



# Cross-over 

noOfCrossovers = math.floor(crossover_speed*pop_size)

child = random.sample(population, 1)

#duplicate = True

#parent1 = []

#parent2 = []


for k in range (0, noOfCrossovers, 1):

print("num1")

duplicate = True

while (duplicate == True):

print("num2")


parent1 = []

parent2 = []

while (parent1 == parent2):

parent1 = random.choice(newPopulation)

parent2 = random.choice(newPopulation)

sliceStart = random.randint(0, math.ceil(len(parent1)/2))

pres = sliceStart+(math.floor(len(parent1)/2))

child = parent1[sliceStart:pres]

print(parent1)

print(parent2)

print(sliceStart)

print(child)



child.append(parent2[i])



print(child)

newPopulation.append(child)



# Random Chromosome


if (len(population) != len(newPopulation)):

for i in range (0, (len(population)-len(newPopulation)), 1):

pattern = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]

while (1):

random.shuffle(pattern)

if pattern not in newPopulation:

newPopulation.append(pattern)

print(pattern)

break


print(newPopulation)


population = newPopulation.copy()

print(population)
